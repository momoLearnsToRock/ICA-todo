"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql = require("mssql");
const dbg = require("debug");
const debug = dbg('todo:helpers');
var Helpers;
(function (Helpers) {
    class ResponseDTO {
        constructor({ message, data }) {
            this.message = message;
            this.data = data;
        }
    }
    Helpers.ResponseDTO = ResponseDTO;
    class SqlField {
        constructor({ name, type }) {
            this.name = name;
            this.type = type;
        }
    }
    Helpers.SqlField = SqlField;
    class TableType {
        constructor(name) {
            this.tableName = name;
        }
    }
    Helpers.TableType = TableType;
    class SqlTableType extends TableType {
        constructor({ connectionPool, tableName, fields, autoGeneratedPrimaryKey }) {
            super(tableName);
            // this.tableName = tableName;
            this.fields = fields;
            this.autoGeneratedPrimaryKey = autoGeneratedPrimaryKey;
            this.connectionPool = connectionPool;
        }
        getFieldNames(includeId) {
            let fieldsString = '';
            this.fields.forEach((item, index) => {
                if (includeId || item.name.toLowerCase() !== 'id') {
                    fieldsString += item.name;
                    if (index !== this.fields.length - 1) {
                        fieldsString += ', ';
                    }
                }
            });
            return fieldsString;
        }
        createInsertIntoStatement(includeId, jsonBody, sqlReq) {
            const fields = this.getFieldNames(includeId);
            const values = [];
            this.fields.forEach((item, index) => {
                if (includeId || item.name.toLowerCase() !== 'id') {
                    if (item.name === 'ModifiedOn') {
                        values.push('GETDATE()');
                    }
                    else {
                        values.push(`@${item.name}`);
                        sqlReq.input(`${item.name}`, jsonBody[item.name]);
                    }
                }
            });
            const PKType = 'nvarchar(MAX)'; // 'bigint'; // the sql datatype of the table's PK. Todo: get this value on instantiation of the tables in future
            const query = `DECLARE @_keys table([Id] ${PKType})
  
       INSERT INTO ${this.tableName} (${fields}) 
       OUTPUT inserted.Id INTO @_keys
       VALUES (${values.join(', ')})
  
       SELECT t.*
       FROM @_keys AS g 
       JOIN dbo.${this.tableName} AS t 
       ON g.Id = t.Id`;
            // note to developers: SCOPE_IDENTITY() would have been a good option but we have nvarchar ids. this method is a copy of what EF does
            return query;
        }
        createDeleteStatement(id, sqlReq) {
            sqlReq.input('id', id);
            return `DELETE FROM ${this.tableName} WHERE Id = @id`;
        }
        getAll() {
            return __awaiter(this, void 0, void 0, function* () {
                let result = null;
                try {
                    const requ = new sql.Request(this.connectionPool);
                    result = yield requ.query(`select * from ${this.tableName}`);
                    debug(result.toString());
                    return (new ResponseDTO({ message: '', data: result }));
                }
                catch (er) {
                    debug(er);
                    return (new ResponseDTO({ message: 'error', data: result }));
                }
            });
        }
        insert(jsonBody) {
            return __awaiter(this, void 0, void 0, function* () {
                let result = null;
                let msg = '';
                try {
                    // note that the check for existing id must already be done.
                    const requestIns = new sql.Request(this.connectionPool);
                    result = yield requestIns.query(this.createInsertIntoStatement(!this.autoGeneratedPrimaryKey, jsonBody, requestIns));
                    if (result.rowsAffected[0] != 0) {
                        msg = 'item created';
                    }
                    debug('return of insert', result);
                    return new ResponseDTO({ message: msg, data: result });
                }
                catch (err) {
                    debug(err);
                    return new ResponseDTO({ message: 'error', data: result });
                }
            });
        }
        getById(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const requ = new sql.Request(this.connectionPool);
                debug('select by id: ', `select * from ${this.tableName} where Id= @id`);
                requ.input('id', id);
                let result = yield requ.query(`select * from ${this.tableName} where Id= @id`);
                debug('return of check for the same id', result);
                let item = null;
                if (!!result.recordset && result.recordset.length === 1) {
                    item = result.recordset[0];
                }
                return new ResponseDTO({ message: '', data: item });
            });
        }
        delete(id) {
            return __awaiter(this, void 0, void 0, function* () {
                let result = null;
                const requ = new sql.Request(this.connectionPool);
                result = yield requ.query(this.createDeleteStatement(id, requ));
                debug('return of check for the delete statement', result);
                return true;
            });
        }
    }
    Helpers.SqlTableType = SqlTableType;
})(Helpers = exports.Helpers || (exports.Helpers = {}));
//# sourceMappingURL=misc.js.map