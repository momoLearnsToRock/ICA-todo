"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const baseRouter = require("./baseRouter");
class TodosRouter extends baseRouter.BaseRouter {
    constructor({ table, disableGetAll, disablePost, disablePut, disablePatch, disableDelete }) {
        super({
            table: table,
            disableGetAll: disableGetAll,
            disablePost: disablePost,
            disablePut: disablePut,
            disablePatch: disablePatch,
            disableDelete: disableDelete
        });
        // #region TodoCards
        // ROUTE: /todos/n/cards
        this.router.route("/:todoId/cards")
            // GET
            .get((req, res) => {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        let reqUrl = `$filter=todoId eq ${req.params.todoId}`;
                        let rslt = yield this.table.todoCardsTable.getAll(reqUrl);
                        res.send(rslt);
                    }
                    catch (err) {
                        console.log(err);
                        let code = 500;
                        switch (true) {
                            case "error" == err.message:
                            case /^Parse error:/.test(err.message):
                                code = 400;
                                break;
                        }
                        res.status(code).send(err.message);
                    }
                });
            }.bind(this)());
        })
            // POST
            .post((req, res) => {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        if (req.body.id) {
                            if (this.table.todoCardsTable.autoGeneratedPrimaryKey) {
                                throw new Error("id should not be passed, it will be generated by the system");
                            }
                        }
                        req.body.todoId = req.params.todoId;
                        let insResult = yield this.table.todoCardsTable.insert(req.body, true); // the second parameter makes sure all the needed fields are passed
                        res.status(201).send(insResult);
                    }
                    catch (err) {
                        let code = 500;
                        switch (true) {
                            case "an existing item already exists" == err.message:
                                code = 409;
                                break;
                            case "error" == err.message:
                            case "id should not be passed, it will be generated by the system" ==
                                err.message:
                            case /^Body is missing the field/.test(err.message):
                            case /^No fields could be parsed from body./.test(err.message):
                            case /^The field '.*' entity.$/.test(err.message):
                            case /^Could not find '.*' with the id: '.*'./.test(err.message):
                            case /^An item with given identifier already exists.$/.test(err.message):
                                code = 400;
                                break;
                        }
                        res.status(code).send(err.message);
                    }
                });
            }.bind(this)());
        });
        // ROUTE: /todos/n/cards/n
        // Middle-ware
        this.router.use("/:todoId/cards/:cardId", (req, res, next) => {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        let reqUrl = `$filter=(todoId eq ${req.params.todoId} and id eq ${req.params.cardId})`;
                        let rslt = yield this.table.todoCardsTable.getAll(reqUrl);
                        if (!rslt || rslt.length == 0) {
                            throw new Error(`Could not find an entry with the given id.`);
                        }
                        req.todoCardById = rslt[0];
                        if (req.body.id && req.body.id !== req.todoCardById.id) {
                            res
                                .status(400)
                                .send("Wrong id was passed as part of the request body.");
                        }
                        next();
                    }
                    catch (err) {
                        let code = 500;
                        switch (err.message) {
                            case "error":
                            case "Wrong id was passed as part of the request body.":
                                code = 400;
                            case "Could not find an entry with the given id.":
                                code = 404;
                                break;
                        }
                        res.status(code).send(err.message);
                    }
                });
            }.bind(this)());
        });
        this.router.route("/:todoId/cards/:cardId")
            // GET
            .get((req, res) => {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        let reqUrl = `$filter=todoId eq ${req.params.todoId} and id eq ${req.params.cardId}`;
                        let rslt = yield this.table.todoCardsTable.getAll(reqUrl);
                        res.send(rslt);
                    }
                    catch (err) {
                        console.log(err);
                        let code = 500;
                        switch (true) {
                            case "error" == err.message:
                            case /^Parse error:/.test(err.message):
                                code = 400;
                                break;
                        }
                        res.status(code).send(err.message);
                    }
                });
            }.bind(this)());
        })
            // POST (not allowed)
            .post((req, res) => {
            this.methodNotAvailable(res, `"post"`, `try using "post" on the address "todos/${req.params.todoId}/cards" instead of "todos/${req.params.todoId}/cards/${req.params.cardId}"`);
        })
            // PUT
            .put((req, res) => {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    let result = null;
                    try {
                        if (req.todoCardById == null) {
                            throw new Error("Could not find an entry with the given id.");
                        }
                        result = yield this.table.todoCardsTable.update(req.body, req.params.cardId, true); // the last argument makes sure to throw an error if there is a field missing (otherwise it should be patch)
                        res.send(result);
                    }
                    catch (err) {
                        let code = 500;
                        switch (true) {
                            case "Could not find an entry with the given id." == err.message:
                            case "error" == err.message:
                            case /^Body is missing the field/.test(err.message):
                            case /^No fields could be parsed from body./.test(err.message):
                            case /^The field '.*' entity.$/.test(err.message):
                                code = 400;
                                break;
                        }
                        res.status(code).send(err.message);
                    }
                });
            }.bind(this)());
        })
            // PATCH
            .patch((req, res) => {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    let result = null;
                    try {
                        if (req.todoCardById == null) {
                            throw new Error("Could not find an entry with the given id.");
                        }
                        result = yield this.table.todoCardsTable.update(req.body, req.params.cardId, false);
                        res.send(result);
                    }
                    catch (err) {
                        let code = 500;
                        switch (true) {
                            case "Could not find an entry with the given id." == err.message:
                            case "error" == err.message:
                            case /^Body is missing the field/.test(err.message):
                            case /^No fields could be parsed from body./.test(err.message):
                            case /^The field '.*' entity.$/.test(err.message):
                                code = 400;
                                break;
                        }
                        res.status(code).send(err.message);
                    }
                });
            }.bind(this)());
        })
            // DELETE
            .delete((req, res) => {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        if (req.todoCardById == null) {
                            throw new Error("Could not find an entry with the given id.");
                        }
                        yield this.table.todoCardsTable.delete(req.todoCardById.id);
                        res.status(204).send();
                    }
                    catch (err) {
                        let code = 500;
                        switch (err.message) {
                            case "Could not find an entry with the given id.":
                            case "error":
                                code = 400;
                                break;
                        }
                        res.status(code).send(err.message);
                    }
                });
            }.bind(this)());
        });
        // #endregion TodoCards
    }
}
exports.TodosRouter = TodosRouter;
//# sourceMappingURL=todosRouter.js.map