"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const routerBase = require("./routerBase");
const h = require("../helpers/misc");
const dbg = require("debug");
const express = require("express");
class CategoriesRouter extends routerBase.RouterBase {
    // debug: ('todo:categoriesRouter');
    constructor(table, disableGetAll) {
        const debug = dbg('todo:categoriesRouter');
        debug.enabled = true;
        super();
        this.table = table;
        this.router = express.Router();
        debug(this.table.getFieldNames(true));
        this.router.route('/')
            .get((req, res) => {
            this.get(req, res);
        })
            .post((req, res) => {
            this.post(req, res);
        });
    }
    get(req, res) {
        let result = new h.Helpers.ResponseDTO({ message: 'Error', data: null });
        try {
            (function query() {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        let rslt = yield this.table.getAll(); //.then((rslt: h.Helpers.ResponseDTO) => {
                        if (rslt.message === 'error')
                            res.status(400);
                        res.send(rslt);
                    }
                    catch (err) {
                        console.log(err);
                        res.status(400).send(err);
                    }
                });
            }.bind(this)());
        }
        catch (err) {
            console.log(err);
            res.status(500).send(result);
        }
    }
    post(req, res) {
        let result = new h.Helpers.ResponseDTO({ message: 'error', data: null });
        (function query() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    if (req.body.id) {
                        if (this.table.autoGeneratedPrimaryKey) {
                            throw new Error('id should not be passed, it will be generated by the system');
                        }
                        result = yield this.table.getById(req.body.id);
                        if (typeof result.message == undefined || result.message == 'error') {
                            throw new Error('server error');
                        }
                        if (result.data != null) {
                            throw new Error('an existing item already exists');
                        }
                    }
                    result = yield this.table.insert(req.body);
                    res.status(201).send(result);
                }
                catch (err) {
                    let code = 500;
                    switch (err.message) {
                        case 'an existing item already exists':
                            code = 409;
                            break;
                        case 'error':
                        case 'id should not be passed, it will be generated by the system':
                            code = 400;
                            break;
                    }
                    res.status(code).send(err.message);
                }
            });
        }.bind(this)());
    }
    put(req, res) {
        res.send('put implements here!');
    }
    patch(req, res) {
        res.send('patch implements here!');
    }
    delete(req, res) {
        res.send('delete implements here!');
    }
}
exports.CategoriesRouter = CategoriesRouter;
//# sourceMappingURL=categoriesRouter.js.map