"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const h = require("../helpers/misc");
const dbg = require("debug");
const express = require("express");
class RouterBase {
    // debug: ('todo:categoriesRouter');
    constructor(table, disableGetAll) {
        const debug = dbg('todo:categoriesRouter');
        debug.enabled = true;
        this.table = table;
        this.router = express.Router();
        debug(this.table.getFieldNames(true));
        this.router.route('/')
            .get((req, res) => {
            this.get(req, res);
        })
            .post((req, res) => {
            this.post(req, res);
        })
            .put((req, res) => {
            this.methodNotAvailable(res, `"put"`, `try using "put" on the address "${this.table.tableName}/{id}"`);
        })
            .delete((req, res) => {
            this.methodNotAvailable(res, `"delete"`, `try using "delete" on the address "${this.table.tableName}/{id}"`);
        });
        this.router.use('/:id', (req, res, next) => {
            if (req.body.id && req.body.id !== req.params.id) {
                res.status(400).send('Wrong id was passed as part of the request body.');
            }
            else {
                (function query() {
                    return __awaiter(this, void 0, void 0, function* () {
                        try {
                            let rslt = yield this.table.getById(req.params.id);
                            req.itemById = rslt;
                            next();
                        }
                        catch (err) {
                            let code = 500;
                            switch (err.message) {
                                case 'error':
                                    code = 400;
                                    break;
                            }
                            res.status(code).send(err.message);
                        }
                    });
                }.bind(this)());
            }
        });
        this.router.route('/:id')
            .get((req, res) => {
            // if (req.itemById == null) {
            //   res.status(204).send({});
            // } else {
            res.send(req.itemById);
            // }      
        })
            .post((req, res) => {
            this.methodNotAvailable(res, `"post"`, `try using "post" on the address "${this.table.tableName}" instead of "${this.table.tableName}/${req.params.id}"`);
        })
            .put((req, res) => {
            this.put(req, res);
        })
            .delete((req, res) => {
            this.delete(req, res);
        });
    }
    get(req, res) {
        (function query() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    let rslt = yield this.table.getAll(); //.then((rslt: h.Helpers.ResponseDTO) => {
                    if (rslt.message === 'error')
                        res.status(400);
                    res.send(rslt);
                }
                catch (err) {
                    console.log(err);
                    res.status(500).send(err);
                }
            });
        }.bind(this)());
    }
    post(req, res) {
        let result = new h.Helpers.ResponseDTO({ message: 'error', data: null });
        (function query() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    if (req.body.id) {
                        if (this.table.autoGeneratedPrimaryKey) {
                            throw new Error('id should not be passed, it will be generated by the system');
                        }
                        getResult = yield this.table.getById(req.body.id);
                        if (getResult != null) {
                            throw new Error('an existing item already exists');
                        }
                    }
                    let insResult = yield this.table.insert(req.body);
                    res.status(201).send(insResult);
                }
                catch (err) {
                    let code = 500;
                    switch (true) {
                        case 'an existing item already exists' == err.message:
                            code = 409;
                            break;
                        case 'error' == err.message:
                        case 'id should not be passed, it will be generated by the system' == err.message:
                        case /^Body is missing the field/.test(err.message):
                        case /^No fields could be parsed from body./.test(err.message):
                            code = 400;
                            break;
                    }
                    res.status(code).send(err.message);
                }
            });
        }.bind(this)());
    }
    put(req, res) {
        (function query() {
            return __awaiter(this, void 0, void 0, function* () {
                let result = null;
                try {
                    // if (!!disablePut) {
                    //   res.status(405).send(new ResponseDTO('method is not available'));
                    //   return;
                    // }
                    if (req.itemById == null) {
                        throw new Error('no data available');
                    }
                    result = yield this.table.update(req.body, req.params.id);
                    res.send(result);
                }
                catch (err) {
                    let code = 500;
                    switch (err.message) {
                        case 'no data available':
                        case 'error':
                            code = 400;
                            break;
                    }
                    res.status(code).send(err.message);
                }
            });
        }.bind(this)());
    }
    patch(req, res) {
        this.methodNotAvailable(res, "patch", "");
    }
    delete(req, res) {
        (function query() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    // if (!!disableDelete) {
                    //   res.status(405).send(new ResponseDTO('method is not available'));
                    //   return;
                    // }
                    if (req.itemById == null) {
                        throw new Error('no data available');
                    }
                    yield this.table.delete(req.params.id);
                    res.status(204).send();
                }
                catch (err) {
                    let code = 500;
                    switch (err.message) {
                        case 'no data available':
                        case 'error':
                            code = 400;
                            break;
                    }
                    res.status(code).send(err.message);
                }
            });
        }.bind(this)());
    }
    methodNotAvailable(res, verb, suggestion) {
        const message = `The ${verb} verb is not available. ${suggestion || ''}`;
        res.status(405).send(message);
    }
}
exports.RouterBase = RouterBase;
//# sourceMappingURL=routerBase.js.map