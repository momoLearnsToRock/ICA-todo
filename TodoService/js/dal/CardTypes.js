"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sql = require("mssql");
const dbg = require("debug");
const misc_1 = require("../helpers/misc");
const sqlTableType_1 = require("./sqlTableType");
const debug = dbg('todo:cardTypesTable');
class CardTypesTable extends sqlTableType_1.SqlTableType {
    constructor(connectionPool) {
        const cardTypesFields = [
            new misc_1.Helpers.SqlField({ name: "id", type: sql.NChar(4) }),
            new misc_1.Helpers.SqlField({ name: "title", type: sql.NVarChar(255) }),
            new misc_1.Helpers.SqlField({ name: "modifiedOn", type: sql.DateTime })
        ];
        super({ connectionPool: connectionPool, tableName: 'CardTypes', viewName: 'CardTypes', fields: cardTypesFields, autoGeneratedPrimaryKey: false, throwOnExtraFields: true });
        debug.enabled = true;
    }
    async customUpdateChecks(jsonBody) {
        if (jsonBody.id && jsonBody.id.toUpperCase() != jsonBody.id) //key for this table should always be uppercase
            throw new Error(`the field 'id' has an invalid value.`);
        return;
    }
    async customInsertChecks(jsonBody) {
        if (jsonBody.id && jsonBody.id.toUpperCase() != jsonBody.id) //key for this table should always be uppercase
            throw new Error(`the field 'id' has an invalid value.`);
        return;
    }
}
exports.CardTypesTable = CardTypesTable;
//# sourceMappingURL=CardTypes.js.map