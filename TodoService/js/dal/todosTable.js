"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sql = require("mssql");
const dbg = require("debug");
const h = require("../helpers/misc");
const sqlTableType_1 = require("./sqlTableType");
const todoCardsTable_1 = require("./todoCardsTable");
const debug = dbg('todo:todosTable');
class TodosTable extends sqlTableType_1.SqlTableType {
    constructor(connectionPool) {
        const todoFields = [
            new h.Helpers.SqlField({ name: 'id', type: sql.BigInt }),
            new h.Helpers.SqlField({ name: 'note', type: sql.NVarChar(sql.MAX) }),
            new h.Helpers.SqlField({ name: 'createdAt', type: sql.DateTime }),
            new h.Helpers.SqlField({ name: 'contentUrl', type: sql.NVarChar(512) }),
            new h.Helpers.SqlField({ name: 'title', type: sql.NVarChar(255) }),
            new h.Helpers.SqlField({ name: 'todoType', type: sql.NVarChar(50) }),
            new h.Helpers.SqlField({ name: 'priority', type: sql.Int }),
            new h.Helpers.SqlField({ name: 'categoryId', type: sql.BigInt }),
            new h.Helpers.SqlField({ name: 'completedAt', type: sql.DateTime }),
            new h.Helpers.SqlField({ name: 'completedById', type: sql.NVarChar(255) }),
            new h.Helpers.SqlField({ name: 'completedByName', type: sql.NVarChar(255) }),
            new h.Helpers.SqlField({ name: 'isCompleted', type: sql.Bit }),
            new h.Helpers.SqlField({ name: 'assignedToId', type: sql.NVarChar(255) }),
            new h.Helpers.SqlField({ name: 'assignedToName', type: sql.NVarChar(255) }),
            new h.Helpers.SqlField({ name: 'assignedToObjectType', type: sql.NVarChar(50) }),
            new h.Helpers.SqlField({ name: 'dueAt', type: sql.DateTime }),
            new h.Helpers.SqlField({ name: 'activityId', type: sql.BigInt }),
            new h.Helpers.SqlField({ name: 'modifiedOn', type: sql.DateTime }),
            new h.Helpers.SqlField({ name: 'createdById', type: sql.NVarChar(255) }),
            new h.Helpers.SqlField({ name: 'createdByName', type: sql.NVarChar(255) })
        ];
        super({ connectionPool: connectionPool, tableName: 'TodosBase', viewName: 'TodosSimple', fields: todoFields, autoGeneratedPrimaryKey: true, throwOnExtraFields: false });
        debug.enabled = true;
        const todoTagFields = [
            new h.Helpers.SqlField({ name: 'id', type: sql.BigInt }),
            new h.Helpers.SqlField({ name: 'todoId', type: sql.BigInt }),
            new h.Helpers.SqlField({ name: 'tagId', type: sql.BigInt }),
            new h.Helpers.SqlField({ name: 'modifiedOn', type: sql.DateTime }),
        ];
        this.todosTagsTable = new sqlTableType_1.SqlTableType({ connectionPool: connectionPool, tableName: 'TodosTagsBase', viewName: 'TodosTags', fields: todoTagFields, autoGeneratedPrimaryKey: true, throwOnExtraFields: true });
        this.todoCardsTable = new todoCardsTable_1.TodoCardsTable(connectionPool);
    }
    async customUpdateChecks(jsonBody) {
        jsonBody = TodosTable.preParseJson(jsonBody);
        if ((jsonBody.completedAt || jsonBody.completedById || jsonBody.completedByName) && (!jsonBody.completedAt || !jsonBody.completedById || !jsonBody.completedByName)) { //all or none
            throw new Error(`Body is missing the fields för closing todo. all the fields 'completedAt' and 'completedById' and 'completedByName' must be present.`);
        }
        if ((jsonBody.assignedToId || jsonBody.assignedToName || jsonBody.assignedToObjectType) && (!jsonBody.assignedToId || !jsonBody.assignedToName || !jsonBody.assignedToObjectType)) { //all or none
            throw new Error(`Body is missing the fields för assigning todo. all the fields 'assignedToId' and 'assignedToName' and 'assignedToObjectType' must be present.`);
        }
        return;
    }
    async customInsertChecks(jsonBody) {
        await this.customUpdateChecks(jsonBody);
        jsonBody.createdAt = new Date();
    }
    static preParseJson(jsonBody) {
        if (jsonBody.completedBy) {
            jsonBody.completedById = jsonBody.completedBy.id;
            jsonBody.completedByName = jsonBody.completedBy.name;
            delete jsonBody.completedBy;
        }
        if (jsonBody.assignedTo) {
            jsonBody.assignedToId = jsonBody.assignedTo.id;
            jsonBody.assignedToName = jsonBody.assignedTo.name;
            jsonBody.assignedToObjectType = jsonBody.assignedTo.objectType;
            delete jsonBody.assignedTo;
        }
        if (jsonBody.category) {
            jsonBody.categoryId = jsonBody.category.id;
            delete jsonBody.category;
        }
        return jsonBody;
    }
    async updateTodoAndCards(jsonBody, id, throwOnMissingFields, previousTodoState) {
        const transaction = new sql.Transaction(this.connectionPool);
        try {
            await transaction.begin();
            if (jsonBody.cards && jsonBody.cards.length > 0) {
                let todoCards = jsonBody.cards;
                for (let i = 0; i < todoCards.length; i++) {
                    let tc = todoCards[i];
                    const tcUpdateResult = await this.todoCardsTable.updateTransPool(tc, tc.id, false, transaction);
                    debug(tcUpdateResult);
                } // .bind(this));
            }
            const result = await this.update(jsonBody, id, throwOnMissingFields);
            await transaction.commit();
            return result;
        }
        catch (ex) {
            await transaction.rollback();
            throw ex;
        }
    }
}
exports.TodosTable = TodosTable;
//# sourceMappingURL=todosTable.js.map