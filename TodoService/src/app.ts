import express = require('express');
import dbg = require('debug');
import h = require('./helpers/misc.js');
import sql = require('mssql');
import config = require('../config/sql.js');
import categoriesRouter = require('./routers/categoriesRouter.js');
import bodyParser = require('body-parser');

// import tempTests = require('./tempTesting');
const debug = dbg('todo:api');

class main {
  public run(): void {
    debug.enabled = true;

    let monField = new h.Helpers.SqlField({type: "nvarchar(100)", name: "momo"});
    debug(monField.name);

    process.on('unhandledRejection', (err) => {
      debug('unhandledRejection ', err);
    });

    const app = express();
    app.use(bodyParser.urlencoded({ extended: true }));
    app.use(bodyParser.json());
    app.get(['/get', '/'], (req, res) => {
      res.send('Todo service apis.');
    });

    const pool: sql.ConnectionPool = new sql.ConnectionPool(config, (err) => {
      if (err) { debug("error in getting the connection pool"); throw (err); }
      const categoriesFields: h.Helpers.SqlField[] = [
        new h.Helpers.SqlField({name: 'id', type: sql.BigInt}),
        new h.Helpers.SqlField({name: 'title', type: sql.NVarChar(50)}),
        new h.Helpers.SqlField({name: 'sortId', type: sql.Int}),
        new h.Helpers.SqlField({name: 'modifiedOn', type: sql.DateTime}),
      ];
      const categoriesTable: h.Helpers.SqlTableType=  new h.Helpers.SqlTableType({ connectionPool: pool, tableName: 'categories', fields: categoriesFields, autoGeneratedPrimaryKey: true});
      debug(categoriesTable.getFieldNames(true));
      const cr: categoriesRouter.CategoriesRouter = new categoriesRouter.CategoriesRouter(categoriesTable, false); 
      
      app.use('/categories', cr.router)


    });

    const port = process.env.PORT || 3000;
    app.listen(port, function (): void {
      debug(`listening on port ${port}`);
    });
  }
}
let m: main=new main();
m.run();
