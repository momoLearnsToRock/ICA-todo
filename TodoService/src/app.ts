import express = require('express');
import dbg = require('debug');
import h = require('./helpers/misc.js');
import sql = require('mssql');
import config = require('../config/sql.js');
import categoriesRouter = require('./routers/categoriesRouter.js');
import bodyParser = require('body-parser');
import baseRouter = require('./routers/baseRouter.js');
import odataV4Sql= require('odata-v4-sql');

const debug = dbg('todo:api');

class main {
  public run(): void {
    debug.enabled = true;

    let reqUrl = `/?$filter=(Name%20eq%20%27John%27%20and%20LastName%20lt%20%27Doe%27)%20or%20(adress%20eq%20%27Skondalsvag%201%27%20and%20postnummer%20gt%2012868%20and%20postort%20eq%20%27Skondal%27)`;
    reqUrl='$top=100';
    reqUrl=reqUrl.substring(reqUrl.indexOf('$'),reqUrl.length);
    debug(reqUrl);
    const filter= odataV4Sql.createQuery(reqUrl);
    debug(filter.where);    

    
    process.on('unhandledRejection', (err) => {
      debug('unhandledRejection ', err);
    });

    const app = express();
    app.use(bodyParser.urlencoded({ extended: true }));
    app.use(bodyParser.json());
    app.get(['/get', '/'], (req, res) => {
      res.send('Todo service apis.');
    });

    const pool: sql.ConnectionPool = new sql.ConnectionPool(config, (err) => {
      if (err) { debug("error in getting the connection pool"); throw (err); }
      const categoryFields: h.Helpers.SqlField[] = [
        new h.Helpers.SqlField({name: 'id', type: sql.BigInt}),
        new h.Helpers.SqlField({name: 'title', type: sql.NVarChar(100)}),
        new h.Helpers.SqlField({name: 'sortId', type: sql.Int}),
        new h.Helpers.SqlField({name: 'modifiedOn', type: sql.DateTime}),
      ];
      const categoriesTable: h.Helpers.SqlTableType=  new h.Helpers.SqlTableType({ connectionPool: pool, tableName: 'categories', viewName: 'categories', fields: categoryFields, autoGeneratedPrimaryKey: true, throwOnExtraFields: true});
      const cr: categoriesRouter.CategoriesRouter = new categoriesRouter.CategoriesRouter(categoriesTable, false); 
      
      app.use('/categories', cr.router)

      const tagFields: h.Helpers.SqlField[] = [
        new h.Helpers.SqlField({name: 'id', type: sql.BigInt}),
        new h.Helpers.SqlField({name: 'title', type: sql.NVarChar(100)}),
        new h.Helpers.SqlField({name: 'sortId', type: sql.Int}),
        new h.Helpers.SqlField({name: 'modifiedOn', type: sql.DateTime}),
      ];
      const tagsTable: h.Helpers.SqlTableType=  new h.Helpers.SqlTableType({ connectionPool: pool, tableName: 'tags', viewName: 'tags', fields: tagFields, autoGeneratedPrimaryKey: true, throwOnExtraFields:true});
      const tagsRouter: baseRouter.BaseRouter = new baseRouter.BaseRouter(tagsTable, false); 
  
      const activityFields: h.Helpers.SqlField[] = [
        new h.Helpers.SqlField({name: 'id', type: sql.BigInt}),
        new h.Helpers.SqlField({name: 'note', type: sql.NVarChar(sql.MAX)}),
        new h.Helpers.SqlField({name: 'createdAt', type: sql.DateTime}),
        new h.Helpers.SqlField({name: 'contentUrl', type: sql.NVarChar(512)}),
        new h.Helpers.SqlField({name: 'title', type: sql.NVarChar(255)}),
        new h.Helpers.SqlField({name: 'activityType', type: sql.NVarChar(50)}),
        new h.Helpers.SqlField({name: 'priority', type: sql.Int}),
        new h.Helpers.SqlField({name: 'categoryId', type: sql.BigInt}),
        // new h.Helpers.SqlField({name: 'categoryTitle', type: sql.NVarChar(100)}),
        new h.Helpers.SqlField({name: 'modifiedOn', type: sql.DateTime}),
      ];
      const activitiesTable: h.Helpers.SqlTableType=  new h.Helpers.SqlTableType({ connectionPool: pool, tableName: 'activitiesBase', viewName: 'activities', fields: activityFields, autoGeneratedPrimaryKey: true, throwOnExtraFields:false});
      const activitiesRouter: baseRouter.BaseRouter = new baseRouter.BaseRouter(activitiesTable, false);     
      app.use('/activities', activitiesRouter.router)
    });
    
    const port = process.env.PORT || 3000;
    app.listen(port, function (): void {
      debug(`listening on port ${port}`);
    });
  }
}
let m: main=new main();
m.run();
