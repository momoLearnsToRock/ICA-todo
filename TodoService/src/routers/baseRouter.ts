import h = require('../helpers/misc');
import dbg = require('debug');
import express = require('express');
import http = require('http');

export class BaseRouter {
  table: h.Helpers.TableType;
  router: express.Router; //this is the property that should be returned to the express app as a middleware that handles the routes 
  // debug: ('todo:categoriesRouter');
  constructor(table: h.Helpers.SqlTableType, disableGetAll: boolean) {
    const debug = dbg('todo:baseRouter');
    debug.enabled = true;
    this.table = table;
    this.router = express.Router();
    debug(this.table.getFieldNames(true));

    this.router.route('/')
      .get((req, res) => {
        this.get(req, res);
      })
      .post((req, res) => {
        this.post(req, res);
      })
      .put((req, res) => {
        this.methodNotAvailable(res, `"put"`, `try using "put" on the address "${this.table.tableName}/{id}"`);
      })
      .delete((req, res) => {
        this.methodNotAvailable(res, `"delete"`, `try using "delete" on the address "${this.table.tableName}/{id}"`);
      })

    this.router.use('/:id', (req, res, next) => {
      if (req.body.id && req.body.id !== req.params.id) {
        res.status(400).send('Wrong id was passed as part of the request body.');
      }
      else {
        (async function query() {
          try {
            let rslt = await this.table.getById(req.params.id);
            req.itemById = rslt;
            next();
          } catch (err) {
            let code: number = 500;
            switch (err.message) {
              case 'error':
                code = 400;
                break;
            }
            res.status(code).send(err.message);
          }
        }.bind(this)());
      }
    });

    this.router.route('/:id')
      .get((req, res) => {
        // if (req.itemById == null) {
        //   res.status(204).send({});
        // } else {
          res.send(req.itemById);
        // }      
      })
      .post((req, res) => {
        this.methodNotAvailable(res, `"post"`, `try using "post" on the address "${this.table.tableName}" instead of "${this.table.tableName}/${req.params.id}"`);
      })
      .put((req, res) => {
        this.put(req, res);
      })
      .delete((req, res) => {
        this.delete(req, res);
      })
  }

  private get(req: any, res: any): void {
    (async function query() {
      try {
        let reqUrl=req.url;
        reqUrl=reqUrl.substring(reqUrl.indexOf('$'),reqUrl.length);
        reqUrl=decodeURI(reqUrl);
    
        let rslt = await this.table.getAll(reqUrl);
        res.send(rslt);
      }
      catch (err) {
        console.log(err);
        let code: number= 500;
        switch (true) {
          case 'error' == err.message:
          case /^Parse error:/.test(err.message):
            code = 400;
            break;
        }
        res.status(code).send(err.message);
      }
    }.bind(this)());
  }

  private post(req: any, res: any): void {
      (async function query() {
        try {
          if (req.body.id) {
            if (this.table.autoGeneratedPrimaryKey) {
              throw new Error('id should not be passed, it will be generated by the system');
            } 
            const getResult  = await this.table.getById(req.body.id)
            if (getResult != null) {
              throw new Error('an existing item already exists');
            }
          }
          let insResult = await this.table.insert(req.body, true);// the second parameter makes sure all the needed fields are passed
          res.status(201).send(insResult);
        } catch(err){
          let code: number= 500;
          switch (true) {
            case 'an existing item already exists' == err.message:
              code = 409;
              break;
            case 'error' == err.message:
            case 'id should not be passed, it will be generated by the system' == err.message:
            case /^Body is missing the field/.test(err.message):
            case /^No fields could be parsed from body./.test(err.message):
            case /^The field '.*' entity.$/.test(err.message):
              code = 400;
              break;
          }
          res.status(code).send(err.message);
        }
      }.bind(this)());
  }

  private put(req: any, res: any): void {
    (async function query() {
      let result = null;
      try {
        // if (!!disablePut) {
        //   res.status(405).send(new ResponseDTO('method is not available'));
        //   return;
        // }
        if (req.itemById == null) {
          throw new Error('no data available');
        }
        result= await this.table.update(req.body, req.params.id, true);// the last argument makes sure to throw an error if there is a field missing (otherwise it should be patch)
        res.send(result);
      } catch (err) {
        let code: number = 500;
        switch (true) {
          case 'no data available' == err.message:
          case 'error' == err.message:
          case /^Body is missing the field/.test(err.message):
          case /^No fields could be parsed from body./.test(err.message):
          case /^The field '.*' entity.$/.test(err.message):
            code = 400;
            break;
        }
        res.status(code).send(err.message);
      }
    }.bind(this)());
    }

  private patch(req: any, res: any): void {
    this.methodNotAvailable(res, "patch", "");
  }

  private delete(req: any, res: any): void {
    (async function query() {
      try {
        // if (!!disableDelete) {
        //   res.status(405).send(new ResponseDTO('method is not available'));
        //   return;
        // }
        if (req.itemById == null) {
          throw new Error('no data available');
        }
        await this.table.delete(req.params.id);
        res.status(204).send();
      } catch (err) {
        let code: number = 500;
        switch (err.message) {
          case 'no data available':
          case 'error':
            code = 400;
            break;
        }
        res.status(code).send(err.message);
      }
    }.bind(this)());
  }

  private methodNotAvailable(res: any, verb: string, suggestion: string){
    const message = `The ${verb} verb is not available. ${suggestion || ''}`;
    res.status(405).send(message);
  }

}