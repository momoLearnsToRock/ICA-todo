import routerBase = require('./routerBase');
import h = require('../helpers/misc');
import dbg = require('debug');
import express = require('express');
import http = require('http');

export class CategoriesRouter extends routerBase.RouterBase {
  constructor(table: h.Helpers.SqlTableType, disableGetAll: boolean) {
    super(table, disableGetAll);
  }

    private methodNotAvailable(res: any, verb: string, suggestion: string){
    const message = `From ChildClass: The ${verb} verb is not available. ${suggestion || ''}`;
    res.status(405).send(message);
  }
}
// {
//   table: h.Helpers.TableType;
//   router: express.Router; //this is the property that should be returned to the express app as a middleware that handles the routes 
//   // debug: ('todo:categoriesRouter');
//   constructor(table: h.Helpers.SqlTableType, disableGetAll: boolean) {
//     const debug = dbg('todo:categoriesRouter');
//     debug.enabled = true;
//     super();
//     this.table = table;
//     this.router = express.Router();
//     debug(this.table.getFieldNames(true));

//     this.router.route('/')
//       .get((req, res) => {
//         this.get(req, res);
//       })
//       .post((req, res) => {
//         this.post(req, res);
//       })
//       .put((req, res) => {
//         this.methodNotAvailable(res, `"put"`, `try using "put" on the address "${this.table.tableName}/{id}"`);
//       })
//       .delete((req, res) => {
//         this.methodNotAvailable(res, `"delete"`, `try using "delete" on the address "${this.table.tableName}/{id}"`);
//       })

//     this.router.use('/:id', (req, res, next) => {
//       if (req.body.id && req.body.id !== req.params.id) {
//         res.status(400).send('Wrong id was passed as part of the request body.');
//       }
//       else {
//         (async function query() {
//           try {
//             let rslt = await this.table.getById(req.params.id);
//             req.itemById = rslt.data;
//             next();
//           } catch (err) {
//             let code: number = 500;
//             switch (err.message) {
//               case 'error':
//                 code = 400;
//                 break;
//             }
//             res.status(code).send(err.message);
//           }
//         }.bind(this)());
//       }
//     });

//     this.router.route('/:id')
//       .get((req, res) => {
//         if (req.itemById == null) {
//           res.status(204).send({});
//         } else {
//           res.send(req.itemById);
//         }      
//       })
//       .post((req, res) => {
//         this.methodNotAvailable(res, `"post"`, `try using "post" on the address "${this.table.tableName}" instead of "${this.table.tableName}/${req.params.id}"`);
//       })
//       .put((req, res) => {
//         this.put(req, res);
//       })
//       .delete((req, res) => {
//         this.delete(req, res);
//       })
//   }

//   private get(req: any, res: any): void {
//     let result = new h.Helpers.ResponseDTO({ message: 'Error', data: null });
//     try {
//       (async function query() {
//         try {
//           let rslt: h.Helpers.ResponseDTO = await this.table.getAll();//.then((rslt: h.Helpers.ResponseDTO) => {
//           if (rslt.message === 'error')
//             res.status(400);
//           res.send(rslt);
//         }
//         catch (err) {
//           console.log(err);
//           res.status(400).send(err);
//         }
//       }.bind(this)());
//     }
//     catch (err) {
//       console.log(err);
//       res.status(500).send(result);
//     }
//   }

//   private post(req: any, res: any): void {
//     let result = new h.Helpers.ResponseDTO({message: 'error', data: null});
//       (async function query() {
//         try {
//           if (req.body.id) {
//             if (this.table.autoGeneratedPrimaryKey) {
//               throw new Error('id should not be passed, it will be generated by the system');
//             } 
//             result  = await this.table.getById(req.body.id)
//             if (result.data != null) {
//               throw new Error('an existing item already exists');
//             }
//           }
//           result = await this.table.insert(req.body);
//           res.status(201).send(result);
//         } catch(err){
//           let code: number= 500;
//           switch (err.message) {
//             case 'an existing item already exists':
//               code = 409;
//               break;
//             case 'error':
//             case 'id should not be passed, it will be generated by the system':
//               code = 400;
//               break;
//           }
//           res.status(code).send(err.message);
//         }
//       }.bind(this)());
//   }

//   private put(req: any, res: any): void {
//     (async function query() {
//       let result = null;
//       try {
//         // if (!!disablePut) {
//         //   res.status(405).send(new ResponseDTO('method is not available'));
//         //   return;
//         // }
//         if (req.itemById == null) {
//           throw new Error('no data available');
//         }
//         result= await this.table.update(req.body, req.params.id);
//         res.send(result);
//       } catch (err) {
//         let code: number = 500;
//         switch (err.message) {
//           case 'no data available':
//           case 'error':
//             code = 400;
//             break;
//         }
//         res.status(code).send(err.message);
//       }
//     }.bind(this)());
//     }

//   private patch(req: any, res: any): void {
//     this.methodNotAvailable(res, "patch", "");
//   }

//   private delete(req: any, res: any): void {
//     (async function query() {
//       try {
//         // if (!!disableDelete) {
//         //   res.status(405).send(new ResponseDTO('method is not available'));
//         //   return;
//         // }
//         if (req.itemById == null) {
//           throw new Error('no data available');
//         }
//         await this.table.delete(req.params.id);
//         res.status(204).send();
//       } catch (err) {
//         let code: number = 500;
//         switch (err.message) {
//           case 'no data available':
//           case 'error':
//             code = 400;
//             break;
//         }
//         res.status(code).send(err.message);
//       }
//     }.bind(this)());
//   }

//   private methodNotAvailable(res: any, verb: string, suggestion: string){
//     const message = `The ${verb} verb is not available. ${suggestion || ''}`;
//     res.status(405).send(message);
//   }

// }