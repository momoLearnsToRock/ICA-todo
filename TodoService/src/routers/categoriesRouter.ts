import routerBase = require('./routerBase');
import h = require('../helpers/misc');
import dbg = require('debug');
import express = require('express');

export class CategoriesRouter extends routerBase.RouterBase {
  table: h.Helpers.TableType;
  router: express.Router; //this is the property that should be returned to the express app as a middleware that handles the routes 
  // debug: ('todo:categoriesRouter');
  constructor(table: h.Helpers.SqlTableType, disableGetAll: boolean) {
    const debug = dbg('todo:categoriesRouter');
    debug.enabled=true;
    super();
    this.table = table;
    this.router= express.Router(); 
    debug(this.table.getFieldNames(true));

    this.router.route('/')
      .get((req, res) => {
        this.get(req, res);
      })
      .post((req, res) => {
        this.post(req, res);
      })
  }

  private get(req: any, res: any): void {
    let result = new h.Helpers.ResponseDTO({ message: 'Error', data: null });
    try {
      (async function query() {
        try {
          let rslt: h.Helpers.ResponseDTO = await this.table.getAll();//.then((rslt: h.Helpers.ResponseDTO) => {
          if (rslt.message === 'error')
            res.status(400);
          res.send(rslt);
        }
        catch (err) {
          console.log(err);
          res.status(400).send(err);
        }
      }.bind(this)());
    }
    catch (err) {
      console.log(err);
      res.status(500).send(result);
    }
  }

  private post(req: any, res: any): void {
    let result = new h.Helpers.ResponseDTO({message: 'error', data: null});
      (async function query() {
        try {
          if (req.body.id) {
            if (this.table.autoGeneratedPrimaryKey) {
              throw new Error('id should not be passed, it will be generated by the system');
            } 
            result  = await this.table.getById(req.body.id)
            if(typeof result.message ==undefined || result.message =='error'){
              throw new Error('server error');
            }
            if (result.data != null) {
              throw new Error('an existing item already exists');
            }
          }
          result = await this.table.insert(req.body);
          res.status(201).send(result);
        } catch(err){
          let code: number= 500;
          switch (err.message) {
            case 'an existing item already exists':
              code = 409;
              break;
            case 'error':
            case 'id should not be passed, it will be generated by the system':
              code = 400;
              break;
          }
          res.status(code).send(err.message);
        }
      }.bind(this)());
  }

  private put(req: Request, res: Response): void {
    res.send('put implements here!');
  }

  private patch(req: Request, res: Response): void {
    res.send('patch implements here!');
  }

  private delete(req: Request, res: Response): void {
    res.send('delete implements here!');
  }

}