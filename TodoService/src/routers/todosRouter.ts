import baseRouter = require("./baseRouter");
import h = require("../helpers/misc");
import dbg = require("debug");
import express = require("express");
import http = require("http");
import { SqlTableType } from "../dal/sqlTableType";
import { TodosTable } from "../dal/todosTable";
import { debuglog } from "util";

export class TodosRouter extends baseRouter.BaseRouter {
  constructor({
    table,
    disableGetAll,
    disablePost,
    disablePut,
    disablePatch,
    disableDelete
  }: {
    table: TodosTable;
    disableGetAll: boolean;
    disablePost: boolean;
    disablePut: boolean;
    disablePatch: boolean;
    disableDelete: boolean;
  }) {
    super({
      table: table,
      disableGetAll: disableGetAll,
      disablePost: disablePost,
      disablePut: disablePut,
      disablePatch: disablePatch,
      disableDelete: disableDelete
    });

    // #region TodoCards
    this.router.route("/:todoId/cards")
      .get((req, res) => {
        (async function query(this: any) {
          try {
            let reqUrl = `$filter=todoId eq ${req.params.todoId}`;
            let rslt = await this.table.todoCardsTable.getAll(reqUrl);
            res.send(rslt);
          } catch (err) {
            console.log(err);
            let code: number = 500;
            switch (true) {
              case "error" == err.message:
              case /^Parse error:/.test(err.message):
                code = 400;
                break;
            }
            res.status(code).send(err.message);
          }
        }.bind(this)());
      })
      .post((req, res) => {
        (async function query(this: any) {
          try {
            if (req.body.id) {
              if (this.table.todoCardsTable.autoGeneratedPrimaryKey) {
                throw new Error(
                  "id should not be passed, it will be generated by the system"
                );
              }
            }
            req.body.activityId = req.params.todoId;
            let insResult = await this.table.todoCardsTable.insert(
              req.body,
              true
            ); // the second parameter makes sure all the needed fields are passed
            res.status(201).send(insResult);
          } catch (err) {
            let code: number = 500;
            switch (true) {
              case "an existing item already exists" == err.message:
                code = 409;
                break;
              case "error" == err.message:
              case "id should not be passed, it will be generated by the system" ==
                err.message:
              case /^Body is missing the field/.test(err.message):
              case /^No fields could be parsed from body./.test(err.message):
              case /^The field '.*' entity.$/.test(err.message):
              case /^Could not find '.*' with the id: '.*'./.test(err.message):
              case /^An item with given identifier already exists.$/.test(
                err.message
              ):
                code = 400;
                break;
            }
            res.status(code).send(err.message);
          }
        }.bind(this)());
      });

      this.router.route("/:todoId/cards/:cardId")
      .get((req, res) => {
        (async function query(this: any) {
          try {
            let reqUrl = `$filter=todoId eq ${req.params.todoId} and id eq ${req.params.cardId}`;
            let rslt = await this.table.todoCardsTable.getAll(reqUrl);
            res.send(rslt);
          } catch (err) {
            console.log(err);
            let code: number = 500;
            switch (true) {
              case "error" == err.message:
              case /^Parse error:/.test(err.message):
                code = 400;
                break;
            }
            res.status(code).send(err.message);
          }
        }.bind(this)());
      });
    // #endregion TodoCards
  }
}