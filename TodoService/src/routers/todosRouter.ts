import baseRouter = require("./baseRouter");
import h = require("../helpers/misc");
import dbg from "debug";
import express = require("express");
import http = require("http");
import { SqlTableType } from "../dal/sqlTableType";
import { TodosTable } from "../dal/todosTable";
import { debuglog } from "util";

export class TodosRouter extends baseRouter.BaseRouter {
  constructor({
    table,
    disableGetAll,
    disablePost,
    disablePut,
    disablePatch,
    disableDelete
  }: {
    table: TodosTable;
    disableGetAll: boolean;
    disablePost: boolean;
    disablePut: boolean;
    disablePatch: boolean;
    disableDelete: boolean;
  }) {
    super({
      table: table,
      disableGetAll: disableGetAll,
      disablePost: disablePost,
      disablePut: disablePut,
      disablePatch: disablePatch,
      disableDelete: disableDelete
    });

    // #region TodoCards

    // ROUTE: /todos/n/cards
    this.router.route("/:todoId/cards")
    // GET
      .get((req, res) => {
        (async function query(this: any) {
          try {
            let reqUrl = `$filter=todoId eq ${req.params.todoId}`;
            let rslt = await this.table.todoCardsTable.getAll(reqUrl);
            res.send(rslt);
          } catch (err) {
            console.log(err);
            let code: number = 500;
            switch (true) {
              case "error" == err.message:
              case /^Parse error:/.test(err.message):
                code = 400;
                break;
            }
            res.status(code).send(err.message);
          }
        }.bind(this)());
      })
      // POST
      .post((req, res) => {
        (async function query(this: any) {
          try {
            if (req.body.id) {
              if (this.table.todoCardsTable.autoGeneratedPrimaryKey) {
                throw new Error("id should not be passed, it will be generated by the system");
              }
            }
            req.body.todoId = req.params.todoId;
            let insResult = await this.table.todoCardsTable.insert(
              req.body,
              true
            ); // the second parameter makes sure all the needed fields are passed
            res.status(201).send(insResult);
          } catch (err) {
            let code: number = 500;
            switch (true) {
              case "an existing item already exists" == err.message:
                code = 409;
                break;
              case "error" == err.message:
              case "id should not be passed, it will be generated by the system" ==
                err.message:
              case /^Body is missing the field/.test(err.message):
              case /^No fields could be parsed from body./.test(err.message):
              case /^The field '.*' entity.$/.test(err.message):
              case /^Could not find '.*' with the id: '.*'./.test(err.message):
              case /^An item with given identifier already exists.$/.test(
                err.message
              ):
                code = 400;
                break;
            }
            res.status(code).send(err.message);
          }
        }.bind(this)());
      });

    // ROUTE: /todos/n/cards/n
    // Middle-ware
    this.router.use("/:todoId/cards/:cardId", (req, res, next) => {
      (async function query(this: any) {
        try {
          let reqUrl = `$filter=(todoId eq ${req.params.todoId} and id eq ${req.params.cardId})`;
          let rslt = await this.table.todoCardsTable.getAll(reqUrl);
          if (!rslt || rslt.length == 0) {
            throw new Error(`Could not find an entry with the given id.`);
          }
          (<any>req).todoCardById = rslt[0];
          if (req.body.id && req.body.id !== (<any>req).todoCardById.id) {
            res
              .status(400)
              .send("Wrong id was passed as part of the request body.");
          }
          next();
        } catch (err) {
          let code: number = 500;
          switch (err.message) {
            case "error":
            case "Wrong id was passed as part of the request body.":
              code = 400;
            case "Could not find an entry with the given id.":
              code = 404;
              break;
          }
          res.status(code).send(err.message);
        }
      }.bind(this)());
    });

    this.router.route("/:todoId/cards/:cardId")
    
    // GET
    .get((req, res) => {
      (async function query(this: any) {
        try {
          let reqUrl = `$filter=todoId eq ${req.params.todoId} and id eq ${req.params.cardId}`;
          let rslt = await this.table.todoCardsTable.getAll(reqUrl);
          res.send(rslt);
        } catch (err) {
          console.log(err);
          let code: number = 500;
          switch (true) {
            case "error" == err.message:
            case /^Parse error:/.test(err.message):
              code = 400;
              break;
          }
          res.status(code).send(err.message);
        }
      }.bind(this)());
    })
    
    // POST (not allowed)
    .post((req, res) => {
      this.methodNotAvailable(
        res,
        `"post"`,
        `try using "post" on the address "todos/${req.params.todoId}/cards" instead of "todos/${req.params.todoId}/cards/${req.params.cardId}"`
      );
    })
    
    // PUT
    .put((req, res) => {
      (async function query(this: any) {
        let result = null;
        try {
          if ((<any>req).todoCardById == null) {
            throw new Error("Could not find an entry with the given id.");
          }
          result = await this.table.todoCardsTable.update(
            req.body,
            req.params.cardId,
            true
          ); // the last argument makes sure to throw an error if there is a field missing (otherwise it should be patch)
          res.send(result);
        } catch (err) {
          let code: number = 500;
          switch (true) {
            case "Could not find an entry with the given id." == err.message:
            case "error" == err.message:
            case /^Body is missing the field/.test(err.message):
            case /^No fields could be parsed from body./.test(err.message):
            case /^The field '.*' entity.$/.test(err.message):
              code = 400;
              break;
          }
          res.status(code).send(err.message);
        }
      }.bind(this)());
    })
    
    // PATCH
    .patch((req, res) => {
      (async function query(this: any) {
        let result = null;
        try {
          if ((<any>req).todoCardById == null) {
            throw new Error("Could not find an entry with the given id.");
          }
          result = await this.table.todoCardsTable.update(
            req.body,
            req.params.cardId,
            false
          );
          res.send(result);
        } catch (err) {
          let code: number = 500;
          switch (true) {
            case "Could not find an entry with the given id." == err.message:
            case "error" == err.message:
            case /^Body is missing the field/.test(err.message):
            case /^No fields could be parsed from body./.test(err.message):
            case /^The field '.*' entity.$/.test(err.message):
              code = 400;
              break;
          }
          res.status(code).send(err.message);
        }
      }.bind(this)());
    })

    // DELETE
    .delete((req, res) => {
      (async function query(this: any) {
        try {
          if ((req as any).todoCardById == null) {
            throw new Error("Could not find an entry with the given id.");
          }
          await this.table.todoCardsTable.delete(
            (req as any).todoCardById.id
          );
          res.status(204).send();
        } catch (err) {
          let code: number = 500;
          switch (err.message) {
            case "Could not find an entry with the given id.":
            case "error":
              code = 400;
              break;
          }
          res.status(code).send(err.message);
        }
      }.bind(this)());
    });

    // #endregion TodoCards
  }
}