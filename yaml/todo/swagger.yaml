---
swagger: "2.0"
info:
  description: Ica MinButik - Todo
  version: 1.0.0
  title: ToDo API
  contact:
    email: goran.roseen@acando.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /ica-egenkontroll/todo/1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: clients
  description: Operations available to regular clients
schemes:
- https
paths:
  /todos:
    get:
      tags:
      - clients
      summary: searches for todos
      description: |
        By passing in the appropriate options, you can search for
        available todos in the system
      operationId: searchTodo
      produces:
      - application/json
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        required: false
        type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        required: false
        type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625), note that expand is not supported
        required: false
        type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620), note that expand is not supported
        required: false
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/TodoItem'
        400:
          description: bad input parameter
  /todos/{id}:
    get:
      tags:
      - clients
      summary: Find Todo by Id
      description: Find a Todo by Id
      operationId: getTodoById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the Todo that needs to be fetched
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/TodoItem'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    put:
      tags:
      - clients
      summary: updates a todo
      description: Updates a todo in the system
      operationId: updateTodo
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of the Todo
        required: true
        type: string
      - in: body
        name: Todo
        description: Todo to update
        required: true
        schema:
          $ref: '#/definitions/TodoItem'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
    delete:
      tags:
      - admins
      summary: Delete ToDo by Id
      description: Deletes a Todo item in the system
      operationId: deleteTodo
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the Todo that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
  /todos/{id}/cards:
    get:
      tags:
      - clients
      summary: shows cards belonging to the todo
      description: |
        returns all cards belonging to a specific todo
      operationId: getTodoCards
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the todo
        required: true
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/TodoCard'
        400:
          description: bad input parameter
    post:
      tags:
      - clients
      summary: adds a TodoCard
      description: Adds a card to the todo
      operationId: addTodoCard
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the todo
        required: true
        type: string
      - in: body
        name: TodoCard
        description: TodoCard to add
        required: false
        schema:
          $ref: '#/definitions/TodoCard'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /todos/{id}/cards/{cardId}:
    get:
      tags:
      - clients
      summary: Find todoCard by Id
      description: Find an todoCard by Id
      operationId: getTodoCardById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the todo
        required: true
        type: string
      - name: cardId
        in: path
        description: Id of the todoCard that needs to be fetched
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/TodoCard'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    put:
      tags:
      - clients
      summary: updates a todoCard
      description: Updates a todoCard in the system
      operationId: updateTodoCard
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of the Todo
        required: true
        type: string
      - name: cardId
        in: path
        description: id of the TodoCard to be updated
        required: true
        type: string
      - in: body
        name: TodoCard
        description: TodoCard to update
        required: false
        schema:
          $ref: '#/definitions/TodoCard'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
    delete:
      tags:
      - admins
      summary: Delete TodoCard by Id
      description: Deletes a todoCard item in the system
      operationId: deleteTodoCard
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the todo
        required: true
        type: string
      - name: cardId
        in: path
        description: Id of the todoCard that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
  /todos/{id}/cards/{cardId}/attachment/{fileName}:
    get:
      tags:
      - clients
      summary: returns the attachment to a card
      description: |
        returns an attachment on a card
      operationId: getCardsAttachment
      parameters:
      - name: id
        in: path
        description: Id of the todo
        required: true
        type: string
      - name: cardId
        in: path
        description: Id of the todoCard
        required: true
        type: string
      - name: fileName
        in: path
        description: name of the attachment file
        required: true
        type: string
      responses:
        200:
          description: the attachement file
        400:
          description: bad input parameter
  /todos/{id}/cards/{cardId}/attachment:
    post:
      tags:
      - clients
      summary: adds an attachment to a TodoCard
      description: Adds an attachment to the card belonging to the todo
      operationId: addTodoCardAttachment
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the todo
        required: true
        type: string
      - name: cardId
        in: path
        description: Id of the todoCard
        required: true
        type: string
      - name: attachmentData
        in: formData
        required: true
        type: string
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /categories:
    get:
      tags:
      - clients
      summary: Fetch all categories
      description: Fetch all categories
      operationId: getCategories
      produces:
      - application/json
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        required: false
        type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        required: false
        type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625), note that expand is not supported
        required: false
        type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620), note that expand is not supported
        required: false
        type: string
      responses:
        200:
          description: all categories
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
        400:
          description: bad input parameter
    post:
      tags:
      - admins
      summary: adds a Category
      description: Adds a Category to the system
      operationId: addCategory
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Category
        description: Category to add
        required: false
        schema:
          $ref: '#/definitions/Category'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /categories/{id}:
    get:
      tags:
      - clients
      summary: Find Category by Id
      description: Find a Category by Id
      operationId: getCategoryById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the Category that needs to be fetched
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Category'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    put:
      tags:
      - admins
      summary: updates a Category
      description: Updates a Category in the system
      operationId: updateCategory
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of the Category to be updated
        required: true
        type: string
      - in: body
        name: Category
        description: Category to update
        required: false
        schema:
          $ref: '#/definitions/Category'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
    delete:
      tags:
      - admins
      summary: Delete Category by Id
      description: Deletes a Category in the system
      operationId: deleteCategory
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the Category that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
  /tags:
    get:
      tags:
      - clients
      summary: Fetch all tags
      description: Fetch all tags
      operationId: getTags
      produces:
      - application/json
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        required: false
        type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        required: false
        type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625), note that expand is not supported
        required: false
        type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620), note that expand is not supported
        required: false
        type: string
      responses:
        200:
          description: all tags
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          description: bad input parameter
    post:
      tags:
      - admins
      summary: adds a Tag
      description: Adds a Tag to the system
      operationId: addTag
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Tag
        description: Tag to add
        required: false
        schema:
          $ref: '#/definitions/Tag'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exist
  /tags/{id}:
    get:
      tags:
      - clients
      summary: Find Tag by Id
      description: Find a Tag by Id
      operationId: getTagById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the Tag that needs to be fetched
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    put:
      tags:
      - admins
      summary: updates a Tag
      description: Updates a Tag in the system
      operationId: updateTag
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of the Tag to be updated
        required: true
        type: string
      - in: body
        name: Tag
        description: Tag to update
        required: false
        schema:
          $ref: '#/definitions/Tag'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
    delete:
      tags:
      - admins
      summary: Delete Tag by Id
      description: Deletes a Tag in the system
      operationId: deleteTag
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the Tag that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
  /activities:
    get:
      tags:
      - clients
      summary: searches for activities
      description: |
        By passing in the appropriate options, you can search for
        available activity in the system
      operationId: searchActivity
      produces:
      - application/json
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        required: false
        type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        required: false
        type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625), note that expand is not supported
        required: false
        type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620), note that expand is not supported
        required: false
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Activity'
        400:
          description: bad input parameter
    post:
      tags:
      - clients
      summary: adds an Activity
      description: Adds an activity to the system
      operationId: addActivity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Activity
        description: Activity to add
        required: false
        schema:
          $ref: '#/definitions/Activity'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /activities/{id}:
    get:
      tags:
      - clients
      summary: Find activity by Id
      description: Find an activity by Id
      operationId: getActivityById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Activity'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    put:
      tags:
      - clients
      summary: updates an activity item
      description: Updates an activity item in the system
      operationId: updateActivity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of the Activity item to be updated
        required: true
        type: string
      - in: body
        name: ActivityItem
        description: Activity item to update
        required: false
        schema:
          $ref: '#/definitions/Activity'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
    delete:
      tags:
      - admins
      summary: Delete Activity by Id
      description: Deletes an activity item in the system
      operationId: deleteActivity
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the activity that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
  /activities/{id}/tags:
    get:
      tags:
      - clients
      summary: shows tags belonging to the activity
      description: |
        returns all tags belonging to a specific activity
      operationId: getActivityTags
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity that the tag belongs to
        required: true
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          description: bad input parameter
    post:
      tags:
      - clients
      summary: adds an ActivityTag
      description: Adds an activityTag to the system
      operationId: addActivityTag
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity that the tag belongs to
        required: true
        type: string
      - in: body
        name: ActivityTag
        description: ActivityTag to add
        required: false
        schema:
          $ref: '#/definitions/Tag'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /activities/{id}/tags/{tagId}:
    get:
      tags:
      - clients
      summary: Find activityTag by tag Id
      description: Find an activityTag by Tag Id
      operationId: getActivityTagById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity that the tag belongs to
        required: true
        type: string
      - name: tagId
        in: path
        description: Id of the tag that needs to be fetched
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    delete:
      tags:
      - admins
      summary: Delete ActivityTag by TagId
      description: Deletes an activityTag item in the system
      operationId: deleteActivityTag
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity that the tag belongs to
        required: true
        type: string
      - name: tagId
        in: path
        description: Id of the tag that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
  /activities/{id}/instantiateTodo:
    post:
      tags:
      - clients
      summary: Creates a todo
      description: Creates a Todo based on the Activity
      operationId: createTodoFromActivity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the activity that the todo will be created from
        required: true
        type: string
      - in: body
        name: todo
        description: fields needed for instantiation of Todo
        required: false
        schema:
          $ref: '#/definitions/TodoInstantiate'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
  /activities/{id}/cards:
    get:
      tags:
      - clients
      summary: shows cards belonging to the activity
      description: |
        returns all cards belonging to a specific activity
      operationId: getActivityCards
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity
        required: true
        type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/ActivityCard'
        400:
          description: bad input parameter
    post:
      tags:
      - clients
      summary: adds an ActivityCard
      description: Adds a card to the activity
      operationId: addActivityCard
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity
        required: true
        type: string
      - in: body
        name: ActivityCard
        description: ActivityCard to add
        required: false
        schema:
          $ref: '#/definitions/ActivityCard'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /activities/{id}/cards/{cardId}:
    get:
      tags:
      - clients
      summary: Find activityCard by Id
      description: Find an activityCard by Id
      operationId: getActivityCardById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity
        required: true
        type: string
      - name: cardId
        in: path
        description: Id of the activityCard that needs to be fetched
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ActivityCard'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    put:
      tags:
      - clients
      summary: updates an activityCard
      description: Updates an activityCard in the system
      operationId: updateActivityCard
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of the Activity
        required: true
        type: string
      - name: cardId
        in: path
        description: id of the ActivityCard to be updated
        required: true
        type: string
      - in: body
        name: ActivityCard
        description: ActivityCard to update
        required: false
        schema:
          $ref: '#/definitions/ActivityCard'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
    delete:
      tags:
      - admins
      summary: Delete ActivityCard by Id
      description: Deletes an activityCard item in the system
      operationId: deleteActivityCard
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the activity
        required: true
        type: string
      - name: cardId
        in: path
        description: Id of the activityCard that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
  /cardTypes:
    get:
      tags:
      - clients
      summary: Fetch all cardTypes
      description: Fetch all cardTypes
      operationId: getCardTypes
      produces:
      - application/json
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        required: false
        type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        required: false
        type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625), note that expand is not supported
        required: false
        type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620), note that expand is not supported
        required: false
        type: string
      responses:
        200:
          description: all cardTypes
          schema:
            type: array
            items:
              $ref: '#/definitions/CardType'
        400:
          description: bad input parameter
    post:
      tags:
      - admins
      summary: adds a CardType
      description: Adds a CardType to the system
      operationId: addCardType
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: CardType
        description: CardType to add
        required: false
        schema:
          $ref: '#/definitions/CardType'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /cardTypes/{id}:
    get:
      tags:
      - clients
      summary: Find CardType by Id
      description: Find a CardType by Id
      operationId: getCardTypeById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of the CardType that needs to be fetched
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/CardType'
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
    put:
      tags:
      - admins
      summary: updates a CardType
      description: Updates a CardType in the system
      operationId: updateCardType
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of the CardType to be updated
        required: true
        type: string
      - in: body
        name: CardType
        description: CardType to update
        required: false
        schema:
          $ref: '#/definitions/CardType'
      responses:
        200:
          description: item updated
        400:
          description: invalid input, object invalid
    delete:
      tags:
      - admins
      summary: Delete CardType by Id
      description: Deletes a CardType in the system
      operationId: deleteCardType
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the CardType that needs to be deleted
        required: true
        type: string
      responses:
        204:
          description: Delete successful
        400:
          description: error
        404:
          description: Could not find an entry with the given id.
definitions:
  TodoItemBase:
    type: object
    required:
    - categoryId
    - contentUrl
    - note
    - priority
    - title
    - todoType
    - createdById
    - createdByName
    properties:
      id:
        type: string
        example: "123456"
      title:
        type: string
        example: Städa charken
      todoType:
        type: string
        example: basic
        description: Must be one of "basic", "measure", "yesno"
      note:
        type: string
        example: Gör så här
      contentUrl:
        type: string
        format: url
        example: https://episerver.ica.se/getContent?id=4711
      createdAt:
        type: string
        format: date-time
        example: 2018-03-14 15:22
      dueAt:
        type: string
        format: date-time
        example: 2018-04-12 12:00
      assignedToId:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      assignedToName:
        type: string
        example: Frukt & Grönt
      assignedToObjectType:
        type: string
        example: Group
      isCompleted:
        type: boolean
        example: true
      completedById:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0852
      completedByName:
        type: string
        example: "Momo Harati"
      completedAt:
        type: string
        format: date-time
        example: 2018-04-12 12:00
      priority:
        type: integer
        format: int32
        example: 1
      categoryId:
        type: string
        example: "123"
      createdById:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0852
      createdByName:
        type: string
        example: "Abdallah Rifai"
      modifiedOn:
        type: string
        format: date-time
        example: 2018-03-14 15:22
    example:
      note: Gör så här
      completedAt: 2018-04-12 12:00
      todoType: basic
      title: Städa charken
      priority: 1
      assignedToId: d290f1ee-6c54-4b01-90e6-d701748f0851
      assignedToName: Frukt & Grönt
      assignedToObjectType: Group
      dueAt: 2018-04-12 12:00
      createdAt: 2018-03-14 15:22
      contentUrl: https://episerver.ica.se/getContent?id=4711
      modifiedOn: 2018-03-14 15:22
      id: "123456"
      categoryId: "123"
      completedById: d290f1ee-6c54-4b01-90e6-d701748f0851
      completedByName: Göran Roseen
      isCompleted: true
      createdById: d290f1ee-6c54-4b01-90e6-d701748f0853
      createdByName: Abdallah Rifai
  TodoItem:
    allOf:
      - $ref: "#/definitions/TodoItemBase"
      - type: object
        properties:
          categoryTitle:
            type: string
            example: HACCP
          tags:
            type: array
            items:
              $ref: '#/definitions/Tag'
          cards:
            type: array
            items:
              $ref: '#/definitions/TodoCard'
        example:
          note: Gör så här
          completedAt: 2018-04-12 12:00
          todoType: basic
          title: Städa charken
          priority: 1
          assignedToId: d290f1ee-6c54-4b01-90e6-d701748f0851
          assignedToName: Frukt & Grönt
          assignedToObjectType: Group
          tags:
          - modifiedOn: 2018-03-14 15:22
            sortId: 1
            id: "123456"
            title: Rengöring
          - modifiedOn: 2018-03-14 15:22
            sortId: 1
            id: "123456"
            title: Rengöring
          dueAt: 2018-04-12 12:00
          createdAt: 2018-03-14 15:22
          contentUrl: https://episerver.ica.se/getContent?id=4711
          modifiedOn: 2018-03-14 15:22
          id: "123456"
          categoryId: "123"
          categoryTitle: HACCP
          completedById: d290f1ee-6c54-4b01-90e6-d701748f0851
          completedByName: Göran Roseen
          isCompleted: true
          createdById: d290f1ee-6c54-4b01-90e6-d701748f0853
          createdByName: Abdallah Rifai
  Tag:
    type: object
    required:
    - title
    properties:
      id:
        type: string
        example: "123456"
      title:
        type: string
        example: Rengöring
      sortId:
        type: integer
        format: int32
        example: 1
      modifiedOn:
        type: string
        format: date-time
        example: 2018-03-14 15:22
    example:
      modifiedOn: 2018-03-14 15:22
      sortId: 1
      id: "123456"
      title: Rengöring
  Category:
    type: object
    required:
    - title
    properties:
      id:
        type: string
        example: "123456"
      title:
        type: string
        example: HACCP
      sortId:
        type: integer
        format: int32
        example: 1
      modifiedOn:
        type: string
        format: date-time
        example: 2018-03-14 15:22
    example:
      modifiedOn: 2018-03-14 15:22
      sortId: 1
      id: "123456"
      title: HACCP
  Activity:
    type: object
    required:
    - activityType
    - categoryId
    - contentUrl
    - note
    - priority
    - title
    properties:
      id:
        type: string
        example: "123456"
      title:
        type: string
        example: Städa charken
      activityType:
        type: string
        example: basic
        description: Must be one of "basic", "measure", "yesno"
      note:
        type: string
        example: Gör så här
      contentUrl:
        type: string
        format: url
        example: https://episerver.ica.se/getContent?id=4711
      createdAt:
        type: string
        format: date-time
        example: 2018-03-14 15:22
      priority:
        type: integer
        format: int32
        example: 1
      categoryId:
        type: string
        example: "123"
      categoryTitle:
        type: string
        example: HACCP
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      cards:
        type: array
        items:
          $ref: '#/definitions/ActivityCard'          
      modifiedOn:
        type: string
        format: date-time
        example: 2018-03-14 15:22
    example:
      note: Gör så här
      createdAt: 2018-03-14 15:22
      contentUrl: https://episerver.ica.se/getContent?id=4711
      modifiedOn: 2018-03-14 15:22
      id: "123456"
      title: Städa charken
      activityType: basic
      priority: 1
      categoryId: "123"
      categoryTitle: HACCP
      tags:
      - modifiedOn: 2018-03-14 15:22
        sortId: 1
        id: "123456"
        title: Rengöring
      - modifiedOn: 2018-03-14 15:22
        sortId: 1
        id: "123456"
        title: Rengöring
  TodoInstantiate:
    type: object
    required:
    - assignedToId
    - assignedToName
    - assignedToObjectType
    - dueAt
    - craetedById
    - createdByName
    properties:
      assignedToId:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      assignedToName:
        type: string
        example: Frukt & Grönt
      assignedToObjectType:
        type: string
        example: Group
      dueAt:
        type: string
        format: date-time
        example: 2018-04-24 14:41
      createdById:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0853
      createdByName:
        type: string
        example: "Abdallah Rifai"
    example:
      dueAt: 2018-04-24 14:41
      assignedToId: d290f1ee-6c54-4b01-90e6-d701748f0851
      assignedToName: Frukt & Grönt
      assignedToObjectType: Group
  TodoCardBase:
    type: object
    required:
    - notes
    properties:
      id:
        type: string
        example: "123456"
      notes:
        type: string
        example: this is how you measure things
    example:
      notes: this is how you measure things
      id: "123456"
  TodoCard:
    allOf:
      - $ref: "#/definitions/TodoCardBase"
      - type: object
        required:
        - activityCardId
        - cardType
        - todoId
        properties:
          todoId:
            type: string
            example: "123456"
          activityCardId:
            type: string
            example: "123456"
          cardType:
            type: string
            example: TEMP
            description: the value is a key from the CardTypes entity. note that the key is string.
          input:
            type: string
            example: tempreture must be between -5 and 8
          outputText:
            type: string
            example: "8"
          outputMedia:
            type: string
            example: '{ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100 }'
          modifiedOn:
            type: string
            format: date-time
            example: 2018-03-14 15:22
        example:
          input: tempreture must be between -5 and 8
          activityCardId: "123456"
          modifiedOn: 2018-03-14 15:22
          notes: this is how you measure things
          outputMedia: '{ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100 }'
          cardType: TEMP
          id: "123456"
          todoId: "123456"
          outputText: "8"
  ActivityCard:
    type: object
    required:
    - cardType
    properties:
      id:
        type: string
        example: "123456"
      activityId:
        type: string
        example: "123456"
      notes:
        type: string
        example: this is how you measure things
      cardType:
        type: string
        example: TEMP
        description: the value is a key from the CardTypes entity. note that the key is string.
      input:
        type: string
        example: tempreture must be between -5 and 8
      outputText:
        type: string
        example: "8"
      modifiedOn:
        type: string
        format: date-time
        example: 2018-03-14 15:22
    example:
      activityId: "123456"
      input: tempreture must be between -5 and 8
      modifiedOn: 2018-03-14 15:22
      notes: this is how you measure things
      cardType: TEMP
      id: "123456"
      outputText: "8"
  CardType:
    type: object
    required:
    - id
    - title
    properties:
      id:
        type: string
        example: TEMP
      title:
        type: string
        example: Tempratur
      modifiedOn:
        type: string
        format: date-time
        example: 2018-03-14 15:22
    example:
      id: TEMP
      title: Tempratur
      modifiedOn: 2018-03-14 15:22
parameters:
  top:
    name: $top
    in: query
    description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
    required: false
    type: integer
  skip:
    name: $skip
    in: query
    description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
    required: false
    type: integer
  filter:
    name: $filter
    in: query
    description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625), note that expand is not supported
    required: false
    type: string
  select:
    name: $select
    in: query
    description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620), note that expand is not supported
    required: false
    type: string
x-azure-api-id: sh-1523977537155
